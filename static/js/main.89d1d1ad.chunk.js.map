{"version":3,"sources":["features/posts/postsSlice.js","components/addPostForm.js","components/editPostForm.js","helpers/formatDate.js","components/Post.js","components/Posts.js","App.js","redux/store.js","index.js"],"names":["postsSlice","createSlice","name","initialState","reducers","addPost","state","action","unshift","id","nanoid","title","payload","description","date","Date","removePost","filter","post","editPost","index","findIndex","loadPosts","store","JSON","parse","localStorage","getItem","posts","forEach","actions","AddPostForm","useState","setTitle","setDescription","error","setError","dispatch","useDispatch","history","useHistory","onSubmit","event","preventDefault","push","className","to","type","value","placeholder","onChange","e","target","EditPostForm","useParams","formatDate","minutes","getMinutes","toLocaleDateString","getHours","Post","useSelector","find","isRemoveConfirmationOpen","setIsRemoveConfirmationOpen","onClick","Posts","length","map","App","useEffect","basename","exact","path","configureStore","reducer","postsReducer","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89d1d1ad.chunk.js","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nexport const postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers:{\r\n        addPost: (state, action) => {\r\n            state.unshift({\r\n                id: nanoid(),\r\n                title: action.payload.title,\r\n                description: action.payload.description,\r\n                date: new Date(),\r\n            })\r\n        },\r\n        removePost: (state, action) => {\r\n            return state.filter((post)=>post.id !== action.payload.id);\r\n        },\r\n        editPost: (state, action) => {\r\n            const index = state.findIndex((post) => post.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n            state[index].description = action.payload.description;\r\n        },\r\n        loadPosts: () => {\r\n            let store = JSON.parse(localStorage.getItem(\"store\"));\r\n            if(store){\r\n                store.posts.forEach((post) => {\r\n                    post.date = new Date(post.date);\r\n                })\r\n                return store.posts;\r\n            }\r\n            return [];\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addPost, removePost, editPost, loadPosts } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { addPost } from '../features/posts/postsSlice';\r\n\r\nexport default function AddPostForm() {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        if(title && description){\r\n            dispatch(addPost({\r\n                title,\r\n                description\r\n            }));\r\n            history.push('/');\r\n        }\r\n        else{\r\n            setError('All fields must be filled up');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"flex flex-col items-center gap-4\">\r\n            <Link to=\"/\" className=\"self-start bg-green-400 hover:bg-green-500\">Go to home page</Link>\r\n            <h1 className=\"text-3xl font-bold\">Create a new post</h1>\r\n            <input type=\"text\" className=\"font-semibold\" value={title} placeholder=\"Title...\" onChange={(e) => setTitle(e.target.value)}/>\r\n            <textarea value={description} placeholder=\"Description...\" onChange={(e) => setDescription(e.target.value)}/>\r\n            {error && <p className=\"text-red-500 font-semibold\">{error}</p>}\r\n            <input type=\"submit\" value=\"Add new post\"/>\r\n        </form>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { editPost } from '../features/posts/postsSlice';\r\n\r\nexport default function EditPostForm() {\r\n    const { id } = useParams();\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        if(title && description){\r\n            dispatch(editPost({\r\n                id,\r\n                title,\r\n                description\r\n            }));\r\n            history.push('/');\r\n        }\r\n        else{\r\n            setError('All fields must be filled up');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"flex flex-col items-center gap-4\">\r\n            <Link to={`/posts/${id}`} className=\"self-start bg-green-400 hover:bg-green-500\">Go back</Link>\r\n            <h1 className=\"text-3xl font-bold\">Edit post</h1>\r\n            <input type=\"text\" className=\"font-semibold\" value={title} placeholder=\"Title...\" onChange={(e) => setTitle(e.target.value)}/>\r\n            <textarea value={description} placeholder=\"Description...\" onChange={(e) => setDescription(e.target.value)}/>\r\n            {error && <p className=\"text-red-500 font-semibold\">{error}</p>}\r\n            <input type=\"submit\" value=\"Edit post\"/>\r\n        </form>\r\n    )\r\n}","export default function formatDate(date) {\r\n    let minutes = date.getMinutes();\r\n    if(minutes < 10){\r\n        minutes = \"0\" + minutes;\r\n    }\r\n    return date.toLocaleDateString() + \" \" + date.getHours() + \":\" + minutes;\r\n}","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\"\r\nimport formatDate from \"../helpers/formatDate\";\r\nimport { removePost } from '../features/posts/postsSlice'\r\n\r\nexport default function Post() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const post = useSelector(state => state.posts.find(post => post.id === id));\r\n\r\n    const [isRemoveConfirmationOpen, setIsRemoveConfirmationOpen] = useState(false);\r\n\r\n    const handleRemove = () => {\r\n        dispatch(removePost({ id }));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        post ?\r\n        <>\r\n            <Link to=\"/\" className=\"bg-green-400 hover:bg-green-500\">Go to home page</Link>\r\n            <div className=\"px-4 mt-4\">\r\n                <h1 className=\"text-3xl font-bold text-center\">{post.title}</h1>\r\n                <p className=\"text-lg\">{post.description}</p>\r\n                <p>{formatDate(post.date)}</p>\r\n            </div>\r\n            <div className=\"my-4 flex gap-4 justify-center\">\r\n                <Link to={`/posts/edit/${id}`} className=\"bg-gray-300 hover:bg-gray-400\">Edit post</Link>\r\n                <button className=\"bg-red-500 hover:bg-red-600\" onClick={() => setIsRemoveConfirmationOpen(true)}>Remove post</button>\r\n            </div>\r\n            {isRemoveConfirmationOpen &&\r\n            <div className=\"fixed top-0 left-0 w-screen h-screen bg-white bg-opacity-90 backdrop-blur\">\r\n                <div className=\"w-full md:w-96 shadow-lg absolute top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2 p-6\">\r\n                    <p>Are you sure you want remove this post?</p>\r\n                    <div className=\"mt-4 flex gap-2\">\r\n                        <button className=\"bg-red-500 hover:bg-red-600\" onClick={handleRemove}>Remove post</button>\r\n                        <button className=\"bg-gray-300 hover:bg-gray-400\" onClick={() => setIsRemoveConfirmationOpen(false)}>Go back</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n        :\r\n        <Redirect to=\"/\"/>\r\n    )\r\n}","import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport formatDate from \"../helpers/formatDate\";\r\n\r\nexport default function Posts() {\r\n    const posts = useSelector(state => state.posts);\r\n    return (\r\n        <>\r\n        <h1 className=\"text-4xl font-bold text-center\">Your posts</h1>\r\n            {posts.length > 0 ?\r\n            <>\r\n                <Link to=\"/add\" className=\"mx-auto mt-6 bg-green-400 hover:bg-green-500\">Add post</Link>\r\n                {posts.map(({ title, description, id, date }) => {\r\n                    return (\r\n                        <div key={id} className=\"mt-4 border-b-2 flex justify-between\">\r\n                            <div>\r\n                                <h1 className=\"text-3xl font-bold\">{title}</h1>\r\n                                <p className=\"text-lg\">{description}</p>\r\n                                <p>{formatDate(date)}</p>\r\n                            </div>\r\n                            <div>\r\n                                <Link to={`/posts/${id}`} className=\"bg-gray-300 hover:bg-gray-400\">More options</Link>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </>\r\n            :\r\n            <>\r\n                <h1 className=\"mt-4 text-2xl text-center\">You don't have post here!</h1>\r\n                <Link to=\"/add\" className=\"mt-4 mx-auto bg-green-400 hover:bg-green-500\">Add post</Link>\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport AddPostForm from './components/addPostForm';\nimport EditPostForm from './components/editPostForm';\nimport Post from './components/Post';\nimport Posts from './components/Posts';\nimport { loadPosts } from './features/posts/postsSlice';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadPosts());\n  },[dispatch])\n  return (\n    <div className=\"container mx-auto p-4\">\n      <HashRouter basename='/'>\n        <Switch>\n          <Route exact path=\"/\">\n            <Posts/>\n          </Route>\n          <Route path=\"/add\">\n            <AddPostForm/>\n          </Route>\n          <Route path=\"/posts/edit/:id\">\n            <EditPostForm/>\n          </Route>\n          <Route path=\"/posts/:id\">\n            <Post/>\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\"/>\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport postsReducer from '../features/posts/postsSlice'\r\n\r\nexport const store = configureStore({\r\n    reducer:{\r\n        posts: postsReducer\r\n    }\r\n})\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"store\", JSON.stringify(store.getState()));\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}